{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/user.service\";\nexport class AuthGuard {\n  constructor(router, service) {\n    this.router = router;\n    this.service = service;\n  }\n  canActivate(next, state) {\n    if (sessionStorage.getItem('token') != null && sessionStorage.getItem('token') != \"\") {\n      let roles = next.data['permittedRoles'];\n      if (roles) {\n        if (this.service.roleMatch(roles)) return true;else {\n          this.router.navigate(['/login']);\n          return false;\n        }\n      }\n      return true;\n    } else {\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n  logout() {\n    sessionStorage.setItem('token', \"\");\n    window.location.reload();\n  }\n  static #_ = this.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.UserService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthGuard","constructor","router","service","canActivate","next","state","sessionStorage","getItem","roles","data","roleMatch","navigate","logout","setItem","window","location","reload","_","i0","ɵɵinject","i1","Router","i2","UserService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Naol\\Desktop\\Daf-Website\\DAF-Tech_Social_Website\\DAF-CLIENT\\src\\app\\auth\\auth.guatd.ts"],"sourcesContent":["\r\nimport { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { UserService } from '../services/user.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n\r\n\r\n  constructor(private router: Router, private service: UserService) {\r\n  }\r\n  canActivate(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot): boolean {\r\n    if (sessionStorage.getItem('token') != null && sessionStorage.getItem('token') != \"\") {\r\n\r\n      let roles = next.data['permittedRoles'] as Array<string>;\r\n\r\n\r\n      if (roles) {\r\n        if (this.service.roleMatch(roles)) return true;\r\n        else {\r\n          this.router.navigate(['/login']);\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    else {\r\n      this.router.navigate(['/login']);\r\n      return false;\r\n    }\r\n\r\n  }\r\n  logout() {\r\n    sessionStorage.setItem('token', \"\")\r\n    window.location.reload()\r\n  }\r\n}\r\n"],"mappings":";;;AASA,OAAM,MAAOA,SAAS;EAGpBC,YAAoBC,MAAc,EAAUC,OAAoB;IAA5C,KAAAD,MAAM,GAANA,MAAM;IAAkB,KAAAC,OAAO,GAAPA,OAAO;EACnD;EACAC,WAAWA,CACTC,IAA4B,EAC5BC,KAA0B;IAC1B,IAAIC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,IAAID,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE;MAEpF,IAAIC,KAAK,GAAGJ,IAAI,CAACK,IAAI,CAAC,gBAAgB,CAAkB;MAGxD,IAAID,KAAK,EAAE;QACT,IAAI,IAAI,CAACN,OAAO,CAACQ,SAAS,CAACF,KAAK,CAAC,EAAE,OAAO,IAAI,CAAC,KAC1C;UACH,IAAI,CAACP,MAAM,CAACU,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;UAChC,OAAO,KAAK;;;MAGhB,OAAO,IAAI;KACZ,MACI;MACH,IAAI,CAACV,MAAM,CAACU,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;;EAGhB;EACAC,MAAMA,CAAA;IACJN,cAAc,CAACO,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;IACnCC,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;EAC1B;EAAC,QAAAC,CAAA,G;qBA/BUlB,SAAS,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAATzB,SAAS;IAAA0B,OAAA,EAAT1B,SAAS,CAAA2B,IAAA;IAAAC,UAAA,EAFR;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}