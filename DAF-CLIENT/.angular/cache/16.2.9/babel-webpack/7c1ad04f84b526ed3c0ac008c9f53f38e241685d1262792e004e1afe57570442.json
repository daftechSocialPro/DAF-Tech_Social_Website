{"ast":null,"code":"import { HttpResponse } from \"@angular/common/http\";\nimport { tap } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../Components/spinner/spinner.service\";\nexport class AuthHeaderIneterceptor {\n  constructor(spinnerService) {\n    this.spinnerService = spinnerService;\n  }\n  intercept(request, next) {\n    this.spinnerService.requestStarted();\n    //console.log(\"herllo\")\n    return this.handler(next, request);\n  }\n  handler(next, request) {\n    return next.handle(request).pipe(tap(event => {\n      if (event instanceof HttpResponse) {\n        this.spinnerService.requestEnded();\n      }\n    }, error => {\n      this.spinnerService.resetSpinner();\n      throw error;\n    }));\n  }\n  static #_ = this.ɵfac = function AuthHeaderIneterceptor_Factory(t) {\n    return new (t || AuthHeaderIneterceptor)(i0.ɵɵinject(i1.SpinnerService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthHeaderIneterceptor,\n    factory: AuthHeaderIneterceptor.ɵfac\n  });\n}","map":{"version":3,"names":["HttpResponse","tap","AuthHeaderIneterceptor","constructor","spinnerService","intercept","request","next","requestStarted","handler","handle","pipe","event","requestEnded","error","resetSpinner","_","i0","ɵɵinject","i1","SpinnerService","_2","factory","ɵfac"],"sources":["C:\\Users\\Naol\\Desktop\\Daf-Website\\DAF-Tech_Social_Website\\DAF-CLIENT\\src\\app\\http-interceptors\\auth-header-interceptor.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpResponse, HttpErrorResponse } from \"@angular/common/http\";\r\nimport { SpinnerService } from \"../Components/spinner/spinner.service\";\r\nimport { Observable, tap } from \"rxjs\";\r\n\r\n@Injectable()\r\n\r\nexport class AuthHeaderIneterceptor implements HttpInterceptor {\r\n\r\n    constructor(private spinnerService: SpinnerService) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n\r\n\r\n        this.spinnerService.requestStarted();\r\n        //console.log(\"herllo\")\r\n        return this.handler(next, request);\r\n    }\r\n    handler(next: any, request: any) {\r\n        return next.handle(request)\r\n            .pipe(\r\n                tap(\r\n                    (event) => {\r\n                        if (event instanceof HttpResponse) {\r\n                            this.spinnerService.requestEnded();\r\n                        }\r\n                    },\r\n                    (error: HttpErrorResponse) => {\r\n                        this.spinnerService.resetSpinner();\r\n                        throw error;\r\n                    }\r\n                )\r\n            )\r\n    }\r\n}"],"mappings":"AACA,SAA+DA,YAAY,QAA2B,sBAAsB;AAE5H,SAAqBC,GAAG,QAAQ,MAAM;;;AAItC,OAAM,MAAOC,sBAAsB;EAE/BC,YAAoBC,cAA8B;IAA9B,KAAAA,cAAc,GAAdA,cAAc;EAAoB;EAEtDC,SAASA,CAACC,OAAyB,EAAEC,IAAiB;IAGlD,IAAI,CAACH,cAAc,CAACI,cAAc,EAAE;IACpC;IACA,OAAO,IAAI,CAACC,OAAO,CAACF,IAAI,EAAED,OAAO,CAAC;EACtC;EACAG,OAAOA,CAACF,IAAS,EAAED,OAAY;IAC3B,OAAOC,IAAI,CAACG,MAAM,CAACJ,OAAO,CAAC,CACtBK,IAAI,CACDV,GAAG,CACEW,KAAK,IAAI;MACN,IAAIA,KAAK,YAAYZ,YAAY,EAAE;QAC/B,IAAI,CAACI,cAAc,CAACS,YAAY,EAAE;;IAE1C,CAAC,EACAC,KAAwB,IAAI;MACzB,IAAI,CAACV,cAAc,CAACW,YAAY,EAAE;MAClC,MAAMD,KAAK;IACf,CAAC,CACJ,CACJ;EACT;EAAC,QAAAE,CAAA,G;qBA1BQd,sBAAsB,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAtBnB,sBAAsB;IAAAoB,OAAA,EAAtBpB,sBAAsB,CAAAqB;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}