{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.BaseURI = environment.baseUrl2;\n  }\n  login(formData) {\n    return this.http.post(this.BaseURI + '/api/Authentication/Login', formData);\n  }\n  roleMatch(allowedRoles) {\n    var isMatch = false;\n    var token = sessionStorage.getItem('token');\n    var payLoad = token ? JSON.parse(window.atob(token.split('.')[1])) : \"\";\n    var userRole = payLoad ? payLoad.role.split(\",\") : [];\n    allowedRoles.forEach(element => {\n      if (userRole.includes(element)) {\n        isMatch = true;\n        return false;\n      } else {\n        return true;\n      }\n    });\n    return isMatch;\n  }\n  getCurrentUser() {\n    var payLoad = JSON.parse(window.atob(sessionStorage.getItem('token').split('.')[1]));\n    let user = {\n      UserID: payLoad.userId,\n      FullName: payLoad.fullName,\n      role: payLoad.role.split(\",\"),\n      ClientId: payLoad.clientId,\n      Photo: payLoad.photo\n    };\n    return user;\n  }\n  getUserRoles() {\n    return this.http.get(this.BaseURI + \"/api/Authentication/GetRoleCategory\");\n  }\n  changePassword(changePassword) {\n    return this.http.post(this.BaseURI + \"/api/Authentication/ChangePassword\", changePassword);\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["environment","UserService","constructor","http","BaseURI","baseUrl2","login","formData","post","roleMatch","allowedRoles","isMatch","token","sessionStorage","getItem","payLoad","JSON","parse","window","atob","split","userRole","role","forEach","element","includes","getCurrentUser","user","UserID","userId","FullName","fullName","ClientId","clientId","Photo","photo","getUserRoles","get","changePassword","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Naol\\Desktop\\Daf-Website\\DAF-Tech_Social_Website\\DAF-CLIENT\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n  readonly BaseURI = environment.baseUrl2;\r\n\r\n  login(formData: any) {\r\n    return this.http.post<any>(this.BaseURI + '/api/Authentication/Login', formData);\r\n  }\r\n  \r\n  roleMatch(allowedRoles: any): boolean {\r\n\r\n    var isMatch = false;\r\n    var token = sessionStorage.getItem('token')\r\n\r\n    var payLoad = token? JSON.parse(window.atob(token!.split('.')[1])):\"\";\r\n\r\n    var userRole: string[] =payLoad? payLoad.role.split(\",\"):[];\r\n    allowedRoles.forEach((element: any) => {\r\n      if (userRole.includes(element)) {\r\n        isMatch = true;\r\n        return false;\r\n      }\r\n      else {\r\n        return true;\r\n      }\r\n    });\r\n    return isMatch;\r\n  }\r\n  getCurrentUser(){\r\n    var payLoad = JSON.parse(window.atob(sessionStorage.getItem('token')!.split('.')[1]));\r\n\r\n    let user : UserView={\r\n      UserID : payLoad.userId,\r\n      FullName: payLoad.fullName,\r\n      role : payLoad.role.split(\",\"),\r\n      ClientId:payLoad.clientId,\r\n      Photo : payLoad.photo\r\n    }\r\n    return user ; \r\n  }\r\n  getUserRoles (){\r\n    \r\n    return this.http.get<any>(this.BaseURI+\"/api/Authentication/GetRoleCategory\")\r\n    \r\n  }\r\n  \r\n  changePassword(changePassword:any){\r\n    return this.http.post<any>(this.BaseURI+\"/api/Authentication/ChangePassword\",changePassword)\r\n  }\r\n\r\n\r\n}\r\nexport interface UserView {\r\n  FullName : string ; \r\n  role: string [];\r\n  UserID : string ;\r\n  ClientId:string;\r\n  Photo:string;\r\n}"],"mappings":"AAEA,SAASA,WAAW,QAAQ,8BAA8B;;;AAK1D,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IACf,KAAAC,OAAO,GAAGJ,WAAW,CAACK,QAAQ;EADC;EAGxCC,KAAKA,CAACC,QAAa;IACjB,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAM,IAAI,CAACJ,OAAO,GAAG,2BAA2B,EAAEG,QAAQ,CAAC;EAClF;EAEAE,SAASA,CAACC,YAAiB;IAEzB,IAAIC,OAAO,GAAG,KAAK;IACnB,IAAIC,KAAK,GAAGC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;IAE3C,IAAIC,OAAO,GAAGH,KAAK,GAAEI,IAAI,CAACC,KAAK,CAACC,MAAM,CAACC,IAAI,CAACP,KAAM,CAACQ,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAC,EAAE;IAErE,IAAIC,QAAQ,GAAYN,OAAO,GAAEA,OAAO,CAACO,IAAI,CAACF,KAAK,CAAC,GAAG,CAAC,GAAC,EAAE;IAC3DV,YAAY,CAACa,OAAO,CAAEC,OAAY,IAAI;MACpC,IAAIH,QAAQ,CAACI,QAAQ,CAACD,OAAO,CAAC,EAAE;QAC9Bb,OAAO,GAAG,IAAI;QACd,OAAO,KAAK;OACb,MACI;QACH,OAAO,IAAI;;IAEf,CAAC,CAAC;IACF,OAAOA,OAAO;EAChB;EACAe,cAAcA,CAAA;IACZ,IAAIX,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,MAAM,CAACC,IAAI,CAACN,cAAc,CAACC,OAAO,CAAC,OAAO,CAAE,CAACM,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAErF,IAAIO,IAAI,GAAY;MAClBC,MAAM,EAAGb,OAAO,CAACc,MAAM;MACvBC,QAAQ,EAAEf,OAAO,CAACgB,QAAQ;MAC1BT,IAAI,EAAGP,OAAO,CAACO,IAAI,CAACF,KAAK,CAAC,GAAG,CAAC;MAC9BY,QAAQ,EAACjB,OAAO,CAACkB,QAAQ;MACzBC,KAAK,EAAGnB,OAAO,CAACoB;KACjB;IACD,OAAOR,IAAI;EACb;EACAS,YAAYA,CAAA;IAEV,OAAO,IAAI,CAACjC,IAAI,CAACkC,GAAG,CAAM,IAAI,CAACjC,OAAO,GAAC,qCAAqC,CAAC;EAE/E;EAEAkC,cAAcA,CAACA,cAAkB;IAC/B,OAAO,IAAI,CAACnC,IAAI,CAACK,IAAI,CAAM,IAAI,CAACJ,OAAO,GAAC,oCAAoC,EAACkC,cAAc,CAAC;EAC9F;EAAC,QAAAC,CAAA,G;qBAhDUtC,WAAW,EAAAuC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX3C,WAAW;IAAA4C,OAAA,EAAX5C,WAAW,CAAA6C,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}